{
	"info": {
		"_postman_id": "a65efad8-588e-4cf0-bd84-5e6aff82cc36",
		"name": "Samvad_Chat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22890303"
	},
	"item": [
		{
			"name": "Chat module",
			"item": [
				{
					"name": "Start conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    pm.environment.set(\"CONVERSATION_ID\", jsonRes.Data.Conversation.id);\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									"\r",
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"InitiatingUserId\": \"{{FIRST_USER_ID}}\",\r\n    \"OtherUserId\": \"{{SECOND_USER_ID}}\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/start",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"start"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "First user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SenderId\": \"{{FIRST_USER_ID}}\",\r\n    \"Message\": \"Football today?\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Second user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{API_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SenderId\": \"{{SECOND_USER_ID}}\",\r\n    \"Message\": \"काय करता आपण या क्षणाला?\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "First user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"After office. 7pm\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Second user sends message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"A conversation is created\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Conversation');\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{SECOND_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"Sounds good. Let's ping everyone. Chat message sent successfully\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation beween these two users - 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/first-user/{{PATIENT_USER_ID}}/second-user/{{OTHER_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"first-user",
								"{{PATIENT_USER_ID}}",
								"second-user",
								"{{OTHER_USER_ID}}"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation beween these two users - 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/first-user/{{OTHER_USER_ID}}/second-user/{{PATIENT_USER_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"first-user",
								"{{OTHER_USER_ID}}",
								"second-user",
								"{{PATIENT_USER_ID}}"
							],
							"query": [
								{
									"key": "phone",
									"value": "{{PATIENT_PHONE_NUMBER}}",
									"description": "Search by patient phone",
									"disabled": true
								},
								{
									"key": "email",
									"value": "{{PATIENT_EMAIL}}",
									"description": "Search by patient email",
									"disabled": true
								},
								{
									"key": "name",
									"value": "{{PATIENT_FIRST_NAME}}",
									"description": "Search by name",
									"disabled": true
								},
								{
									"key": "gender",
									"value": "{{PATIENT_GENDER}}",
									"description": "Search by patient gender",
									"disabled": true
								},
								{
									"key": "birthdateFrom",
									"value": "1975-01-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "birthdateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for birthdate based search",
									"disabled": true
								},
								{
									"key": "createdDateFrom",
									"value": "2021-05-01",
									"description": "Date in format: YYYY-MM-DD. Start of the range for creation date based search",
									"disabled": true
								},
								{
									"key": "createdDateTo",
									"value": "2021-12-12",
									"description": "Date in format: YYYY-MM-DD. End of the range for creation date based search",
									"disabled": true
								}
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonRes = pm.response.json();\r",
									"\r",
									"try {\r",
									"    const messages = jsonRes.Data.ConversationMessages;\r",
									"    var count = 1;\r",
									"    for (var message of messages) {\r",
									"        pm.environment.set(\"CHAT_MESSAGE_\" + count.toString(), message.id);\r",
									"        count++;\r",
									"    }\r",
									"\r",
									"}\r",
									"catch (error) {\r",
									"    console.log(error.message);\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}",
								"messages"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get conversation by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/conversations/{{CONVERSATION_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"conversations",
								"{{CONVERSATION_ID}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Update message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Message\": \"Let's roll!\"\r\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Delete message by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/messages/{{CHAT_MESSAGE_1}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"messages",
								"{{CHAT_MESSAGE_1}}"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get recent conversations for first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/users/{{PATIENT_USER_ID}}/conversations/recent",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"users",
								"{{PATIENT_USER_ID}}",
								"conversations",
								"recent"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				},
				{
					"name": "Get marked/favourite conversations for first user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request is successfull\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Status).to.eql('success');\r",
									"});\r",
									"\r",
									"pm.test(\"List of patients is returned\", function () {\r",
									"\r",
									"    var jsonRes = pm.response.json();\r",
									"    pm.expect(jsonRes.Data).to.have.property('Patients');\r",
									"    pm.expect(jsonRes.Data.Patients.Items.length).to.be.greaterThan(0);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{PATIENT_USER_JWT}}",
								"description": "User login session token (JWT). Format : Bearer JWT_TOKEN",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{API_CLIENT_INTERNAL_KEY}}",
								"description": "API key for client app authentication",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{BASE_URL}}/chats/users/{{PATIENT_USER_ID}}/conversations/marked",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"chats",
								"users",
								"{{PATIENT_USER_ID}}",
								"conversations",
								"marked"
							]
						},
						"description": "Search addresses using query parameters."
					},
					"response": []
				}
			]
		}
	]
}